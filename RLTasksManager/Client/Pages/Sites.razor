<!-- Display user side of sites to checkout, mark late, etc.. -->
@page "/sites"
@inject ISiteService SiteService


<div class="row m-2">
    <h3 class="p-2">Sites</h3> 
    <AuthorizeView>
        <Authorized>
            <button class="btn btn-primary" @onclick="() => ResetDefaults()">Reset (Should only be pressed once in the morning)</button>
        </Authorized>
        <NotAuthorized>
            <p>Remind someone to reset the list at the beginning of the day.</p>
        </NotAuthorized>
    </AuthorizeView> 
</div>

@if (SiteService.Sites.Count > 0)
{
    <table class="table table-striped table-sm">
        <thead style="position: sticky;top: 0" class="thead-dark">
            <tr>
                <th class="header" scope="col">Site Number</th>
                <th class="header" scope="col">Checking Out</th>
                <th class="header" scope="col">Late Checkout</th>
                <th class="header" scope="col">Is Vacant</th>
                <th class="header" scope="col">Last Checked</th>
                @*<th>Notes</th>*@
            </tr>
        </thead>
        <tbody>
            @foreach (var site in SiteService.Sites)
            {
                <tr>
                    <th>@site.SiteNumber</th>
                    <th><input type="checkbox" @onclick="() => UpdateIsCheckingOut(site)" @bind-value="@site.IsCheckingOut" checked="@site.IsCheckingOut"/></th>
                    <th><input type="checkbox" @onclick="() => UpdateIsLateCheckout(site)" @bind-value="@site.IsLateCheckout" checked="@site.IsLateCheckout"/></th>
                    <th><input type="checkbox" @onclick="() => UpdateIsVacant(site)" @bind-value="@site.IsVacant" checked="@site.IsVacant"/></th>
                    <th>@site.LastChecked</th>
                    @*<th>@site.Note</th>*@
                </tr>
            }
        </tbody>
    </table>
}


@code {      
    protected override async Task OnInitializedAsync()
    {
        await SiteService.LoadSitesAsync();
    }

    private async Task UpdateIsCheckingOut(Site site)
    {
        await SiteService.UpdateIsCheckingOut(site.Id, site);
    }

    private async Task UpdateIsLateCheckout(Site site)
    {
        await SiteService.UpdateIsLateCheckout(site.Id, site);
    }

    private async Task UpdateIsVacant(Site site)
    {
        await SiteService.UpdateIsVacant(site.Id, site);
    }

    private async Task ResetDefaults()
    {
        await SiteService.ResetDefaults();
    }
}
